{"version":3,"sources":["square.js","board.js","game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","key","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","xIsNext","stepNumber","move","slice","setState","concat","currentLocation","0","1","2","3","4","5","6","7","8","step","status","current","winner","moves","map","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a130e6c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Render Squares with properties\r\nconst Square = props => (\r\n    // props values passed in from Board class\r\n    <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n);\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './square';\r\n\r\n// Render Board\r\nclass Board extends React.Component {\r\n\r\n    // Render Squares Method\r\n    renderSquare(i) {\r\n        // Call Square Function and fill values\r\n        return (\r\n            <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />\r\n        );\r\n    }\r\n\r\n    // Render HTML To Screen\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Board from './board'\r\nimport './index.css';\r\n\r\n// Calculate Winner\r\nfunction calculateWinner(squares) {\r\n\r\n    // Winning Lives Array\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    // Loop through winning lines\r\n    for (let i = 0; i < lines.length; i++) {\r\n        // comparing the squares in our array position to the winning one\r\n        const [a, b, c] = lines[i];\r\n        // then checking the following:\r\n        // 1. Compare A to itself and then compare A to B and e.g. A = X And then A to B\r\n        // 2. Compare A to C\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            // Return Player Winner X or O\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n    // Return Null by default\r\n    return null;\r\n}\r\n\r\n// Get Location Of Move\r\nconst getCurrentLocation = (move) => {\r\n    const locationMap = {\r\n        0: 'row: 1, col: 1',\r\n        1: 'row: 1, col: 2',\r\n        2: 'row: 1, col: 3',\r\n        3: 'row: 2, col: 1',\r\n        4: 'row: 2, col: 2',\r\n        5: 'row: 2, col: 3',\r\n        6: 'row: 3, col: 1',\r\n        7: 'row: 3, col: 2',\r\n        8: 'row: 3, col: 3',\r\n    };\r\n    return locationMap[move];\r\n};\r\n\r\n// ========================================\r\n\r\nclass Game extends React.Component {\r\n\r\n    // Constructor to manage square states\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Store Board History\r\n            history: [{\r\n                // Define Length and default to null\r\n                squares: Array(9).fill(null),\r\n            }],\r\n\r\n            // Track the turn order\r\n            xIsNext: true,\r\n\r\n            // Track Current Step\r\n            stepNumber: 0,\r\n        };\r\n    }\r\n\r\n    // Square On Click Handler Method\r\n    handleClick(i) {\r\n        // Create a copy of the data - Immutable\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        // If won, stop anymore clicks\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        // Set Turn Order depending on xIsNext\r\n        // Set Square State and re-render\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            // Concat Click To Array\r\n            history: history.concat([{\r\n                squares: squares,\r\n                currentLocation: getCurrentLocation(i),\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    // JumpTo Method for going back through the moves\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // Declare Variables\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        // History of Moves Buttons\r\n        const moves = history.map((step, move) => {\r\n            const currentLocation = step.currentLocation ? `(${step.currentLocation})` : '';\r\n\r\n            const desc = move ?\r\n                'Go to move #' + move + ' - ' + currentLocation:\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button\r\n                        className={move === this.state.stepNumber ? 'move-list-item-selected' : ''}\r\n                        onClick={() => this.jumpTo(move)}\r\n                       >{desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        // Declare Winner or Next Player\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        // check if game won other wise show next player\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from './game';\r\nimport './index.css';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n"],"sourceRoot":""}